digraph G {
  node [shape=box];

  subgraph cluster1 {
    label = "client";

    subgraph cluster11 {
      label = "Configuring";

      savingPlayerId [label = "savingPlayerId\nenter: setOwnPlayerId\nenter: send(PlayerIdCnf)"];
      requestingPlayerConfiguration_client [label = "requestingPlayerConfiguration\nenter: configurationRequest"];
      sendingPlayerConfiguration_client [label = "sendingPlayerConfiguration\nenter: send(PlayerConfigurationCfg)"];
      receivingPlayerConfiguration [label = "receivingPlayerConfiguration\nenter: connectedToServer"];
      savingPlayerConfiguration_client [label = "savingPlayerConfiguration\nenter: playerConnected\nenter: createPlayerConfiguration\nenter: send(PlayerConfigurationCnf)"];

      receivingPlayerId -> savingPlayerId [label = "received: PlayerIdCfg"];
      savingPlayerId -> requestingPlayerConfiguration_client;
      requestingPlayerConfiguration_client -> sendingPlayerConfiguration_client [label = "configurationResponse"];
      sendingPlayerConfiguration_client -> receivingPlayerConfiguration [label = "received PlayerConfigurationCnf"];
      receivingPlayerConfiguration -> savingPlayerConfiguration_client [label = "received: PlayerConfigurationCfg"];
      savingPlayerConfiguration_client -> receivingPlayerConfiguration;
    }

    receivingPlayerConfiguration -> TBI_client [label = "received: startDraft"];
    waitingForConnection -> receivingPlayerId [label = "connectedToDraft"];
  }

  subgraph cluster2 {
    label = "Server";

    listeningForConnections [label = "listeningForConnections\nclientConnected: create ClientStateMachine for client"];

    subgraph cluster21 {
      label = "ClientStateMachine";
  
      subgraph cluster211 {
        label = "Configuring";

	sendingPlayerId [label = "sendingPlayerId\nenter: send(PlayerIdCfg)"];
 	savingPlayerConfiguration_server [label = "savingPlayerConfiguration\nenter: playerConnected\nenter: createPlayerConfiguration\nenter: send(PlayerConfigurationCnf)"];
	waitingForOtherPlayers;
 	forwardingPlayerConfiguration [label = "forwardingPlayerConfiguration\nenter: send(PlayerConfigurationCfg)"];

	sendingPlayerId -> receivingClientName [label = "received: PlayerIdCnf"];
	receivingClientName -> savingPlayerConfiguration_server [label = "received: PlayerConfigurationCfg"];
	savingPlayerConfiguration_server -> waitingForOtherPlayers;
	waitingForOtherPlayers -> forwardingPlayerConfiguration [label = "playerConnected"];
	forwardingPlayerConfiguration -> waitingForOtherPlayers [label = "received: PlayerConfigurationCnf"];
      }
    } 

    listeningForConnections -> sendingPlayerId [style=dotted, label = "clientConnected"];
    waitingForOtherPlayers -> TBI_server [label = "startDraft"];
  }

  null [shape = plaintext label=""];
  null -> chooseClientOrServer;
  chooseClientOrServer -> waitingForConnection [label = "connectToDraft"];
  chooseClientOrServer -> listeningForConnections [label = "hostDraft"];
}
